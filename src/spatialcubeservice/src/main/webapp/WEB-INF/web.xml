<web-app id="WebApp_ID" version="2.4"
	xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
	http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

	<display-name>Raster Storage Archive</display-name>

	<servlet>
		<servlet-name>mvc-dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>mvc-dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/mvc-dispatcher-servlet.xml 
			/WEB-INF/applicationContext.xml
		</param-value>
	</context-param>

    <!-- take especial notice of the name of this servlet -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!--
	This temporarily commented out because of the tomcat 6 bug below:
	https://issues.apache.org/bugzilla/show_bug.cgi?id=42411

	Currently the DefaultServlet only uses PathInfo to locate the file to serve.
	It should actually use ServletPath + PathInfo to serve the file.
	As it is now, it is impossible to use a servlet mapping like the above.

	If you make a request for '/app/blah.gif', ServletPath = '/app' and
	PathInfo = '/blah.gif'.

	so DefaultServlet will try to serve '/blah.gif' which doesn't exist because it
	is in the '/app/' directory. if it used ServletPath + PathInfo, it will work
	as expected.

	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>/app/*</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>/resources/*</url-pattern>
	</servlet-mapping>
	-->

	<!-- Current solution for handling static contents. A bit hackish but it works. -->
	<servlet-mapping>
	    <servlet-name>default</servlet-name>
	    <url-pattern>*.html</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
	    <servlet-name>default</servlet-name>
	    <url-pattern>*.htm</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
	    <servlet-name>default</servlet-name>
	    <url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
	 <servlet-name>default</servlet-name>
	    <url-pattern>*.png</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
	    <servlet-name>default</servlet-name>
	    <url-pattern>*.css</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
	    <servlet-name>default</servlet-name>
	    <url-pattern>*.js</url-pattern>
	</servlet-mapping>

</web-app>
