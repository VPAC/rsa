<project name="CmdClient" default="install" basedir=".">
	<description>
        	Build file for the rsa command client
	</description>

	<!-- set global properties for this build -->
	<property name="src" value="src" />
	<property name="script" value="script" />
	<property name="resources" value="resources" />
	<property name="config" value="config" />
	<property name="inc" value="lib" />
	<property name="inc-references" value="lib-references" />
	<property name="inc-test" value="lib-test" />
	<property name="build" location="build" />
	<property name="test-src" value="test-src" />
	<property name="test-build" location="test-build" />
	<property name="test-data" value="../../data" />
	<property name="filter-src" value="filter-src" />
	<property name="filter-build" location="filter-build" />
	<property name="dist" location="dist" />
	<property name="bin" location="bin" />
	<property name="doc" location="doc" />
	<property name="test-results" location="test-results" />
	<property name="test-reports" location="test-reports" />

	<!--  Application definitions -->
	<property name="app.name" value="rsacli" />
	<!-- Versions numbers are populated by master build file; see ../build.xml. -->
	<property name="version.number" value="local" />
	<property name="svn.info.lastRev" value="rN" />
	<property name="dist.name" value="${app.name}-${version.number}" />

	<!-- Project Dependencies -->
	<property name="storagemanager.app.name" value="storagemanager" />
	<property name="storagemanager" location="../${storagemanager.app.name}" />
	<property name="storagemanagerSrc" location="../storagemanager/src" />
	<property name="storagemanagerResources" location="../storagemanager/resources" />
	<property name="storagemanagerConfig" location="../storagemanager/config" />
	<property name="storagemanagerAntFile" location="${storagemanager}/ant/build.xml" />
	<property name="querySrc" location="../rsaquery/src" />
	<property name="queryFilterSrc" location="../rsaquery/filter-src" />

	<!-- Make sure gdal library location is correct for production -->
	<condition property="gdalLib" value="C:\tmp\gdalapps\bin">
		<os family="windows" />
	</condition>
	<condition property="gdalLib" value="/usr/local/lib">
		<os family="unix" />
	</condition>

	<condition property="dllWildcard" value="*.dll">
		<os family="windows" />
	</condition>
	<condition property="dllWildcard" value="*.so">
		<os family="unix" />
	</condition>

	<!-- Host name, for benchmark results -->
	<exec executable="hostname" outputproperty="hostname"/>

	<!-- Java Compilation version -->
	<property name="target" value="1.7" />
	<property name="source" value="1.7" />

	<!-- Used for compile -->
	<path id="classpath" >
		<fileset dir="${inc}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	<!-- Used for compile -->
	<path id="gdal-classpath" >
		<fileset file="${gdalLib}/gdal.jar" />
	</path>

	<!-- Used for test-compile -->
	<path id="test.classpath">
		<pathelement location="${build}" />
		<pathelement location="${test-build}" />
		<pathelement location="${storagemanagerConfig}" />
		<!-- Reuse the classpath -->
		<path refid="classpath" />
		<path refid="gdal-classpath" />
		<fileset file="${inc-test}/junit-benchmarks-0.4.0.jar" />
	</path>

	<!-- Used for filter-compile -->
	<path id="filter.classpath">
		<pathelement location="${build}" />
		<pathelement location="${filter-build}" />
	</path>

	<!-- List all needed jar in our classpath for used when creating MANIFEST.MF -->
	<manifestclasspath property="lib.list" jarfile="${inc}">
		<classpath refid="classpath" />
	</manifestclasspath>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
		<mkdir dir="${test-build}" />
		<mkdir dir="${filter-build}" />
		<mkdir dir="${dist}" />
		<mkdir dir="${doc}" />
		<mkdir dir="${test-results}" />
		<mkdir dir="${test-reports}" />
	</target>
	<target name="clean" description="clean up files/folders created during build">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
		<delete dir="${test-build}" />
		<delete dir="${filter-build}" />
		<delete dir="${dist}" />
		<delete dir="${doc}" />
		<delete dir="${test-results}" />
		<delete dir="${test-reports}" />
	</target>

	<target name="copy-resources" depends="init" >
		<!-- copy all .xml or .properties files into build -->
		<copy todir="${build}">
			<fileset dir="${storagemanagerResources}">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
			</fileset>
			<fileset dir="${resources}">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
			</fileset>
		</copy>
	</target>

	<target name="compile" depends="init" description="compile the source ">
		<!-- Compile the java code from ${src} into ${build} -->
		<echo message="Java home = ${java.home}" />
		<javac srcdir="${src}" destdir="${build}" source="${source}" target="${target}" debug="on" debuglevel="lines,vars,source">
			<classpath refid="classpath" />
			<classpath refid="gdal-classpath" />

			<!-- Include dependencies. These don't compile to intermediate jar files
             that can be added to the classpath. -->
			<src path="${storagemanagerSrc}" />
			<src path="${querySrc}" />
		</javac>
	</target>

	<target name="test-compile" depends="init, compile" description="compile test sources ">
		<!-- Compile the java code from ${src} into ${build} -->
		<echo message="Java home = ${java.home}" />
		<javac srcdir="${test-src}" destdir="${test-build}" source="${source}" target="${target}" debug="on" debuglevel="lines,vars,source">
			<classpath refid="classpath" />
			<classpath refid="gdal-classpath" />
			<classpath refid="test.classpath" />

			<!-- Include dependencies. These don't compile to intermediate jar files
             that can be added to the classpath. -->
			<src path="${storagemanagerSrc}" />
			<src path="${querySrc}" />
		</javac>
	</target>

	<target name="filter-compile" depends="init, compile" description="compile filters">
		<!-- Note that the rsa startup script has a compile-filters function
		     that does the same thing. -->
		<echo message="Java home = ${java.home}" />
		<javac srcdir="${filter-src}" destdir="${filter-build}" source="${source}" target="${target}" debug="on" debuglevel="lines,vars,source">
			<classpath refid="classpath" />
			<classpath refid="filter.classpath" />
			<src path="${queryFilterSrc}" />
		</javac>
	</target>

	<target name="test" depends="filter-compile, test-compile, copy-resources" description="run unit tests">
		<!-- Run JUnit test on test classes -->
		<junit fork="yes" haltonfailure="yes" dir="${basedir}">
			<!-- Include GDAL share library -->
			<env key="LD_LIBRARY_PATH" value="${env.LD_LIBRARY_PATH}:${gdalLib}" />
			<classpath refid="test.classpath" />
			<classpath refid="filter.classpath" />
			<formatter type="plain" usefile="false" />
			<formatter type="xml" />
			<test name="org.vpac.ndg.cli.AllTests" todir="${test-results}" />

			<!-- Write benchmark results to a file. Note that the results are
			     dependant on the machine. -->
			<jvmarg value="-Djub.consumers=CONSOLE,XML"/>
			<jvmarg value="-Djub.xml.file=${test-data}/query/benchmarks_${hostname}.xml"/>

			<!-- 
			Single Test Example
			<test name="org.vpac.ndg.rasterservices.tools.junit.ExportDataByNameTest" todir="${test-results}" />		
			
			Batch Test Example	
            <batchtest todir="${test-results}" >
                <fileset dir="${build}" includes="**/*Test.class"/>
            </batchtest>
			-->
		</junit>
	</target>

	<target name="dist" depends="clean,compile,filter-compile,copy-resources" description="generate the distribution">
		<echo>Manifest Class-Path: ${lib.list}</echo>
		<fail message="Re-run the ant script once more to ensure lib folder contains all needed jars so that Manifest Class-Path: is not empty.">
			<condition>
				<length string="${lib.list}" trim="true" when="equal" length="0"/>
			</condition>
		</fail>

		<mkdir dir="${dist}/${dist.name}/lib" />
		<mkdir dir="${dist}/${dist.name}/config" />
		<mkdir dir="${dist}/${dist.name}/filter-src" />
		<mkdir dir="${dist}/${dist.name}/filter" />

		<!-- copy all needed jars into the distribution -->
		<copy todir="${dist}/${dist.name}/lib" flatten="true" verbose="true">
			<path refid="classpath" />
		</copy>

		<!-- copy config. Because this combines the contents of several
		     directories, the readme files are concatenated. -->
		<copy todir="${dist}/${dist.name}/config" flatten="false" verbose="true">
			<fileset dir="${storagemanagerConfig}" />
			<!-- Override some of the storagemanager's default config -->
			<fileset dir="${config}">
				<exclude name="README_HIDDEN.txt" />
			</fileset>
		</copy>
		<concat destfile="${dist}/${dist.name}/config/README.txt">
			<fileset file="${storagemanagerConfig}/README.txt" />
			<fileset file="${config}/README.txt" />
		</concat>

		<!-- copy filters: source and compiled -->
		<copy todir="${dist}/${dist.name}/filter-src" flatten="false" verbose="true">
			<fileset dir="${filter-src}" />
			<fileset dir="${queryFilterSrc}" />
		</copy>
		<copy todir="${dist}/${dist.name}/filter" flatten="false" verbose="true">
			<fileset dir="${filter-build}" />
		</copy>

		<!-- copy rsa script into the distribution-->
		<echo>Bundling: Creating rsacli.sh</echo>
		<copy todir="${dist}/${dist.name}" flatten="true" verbose="true">
			<fileset dir="${script}">
				<exclude name="**/*~" />
			</fileset>
		</copy>

		<!-- Allow easy execution on Unix -->
		<chmod file="${dist}/${dist.name}/rsa" perm="ugo+x"/>
		<chmod file="${dist}/${dist.name}/ng" perm="ugo+x"/>
		<symlink link="${dist}/${app.name}" resource="${dist.name}" overwrite="true" />

		<jar jarfile="${dist}/${dist.name}/${dist.name}.jar" basedir="${build}">
			<manifest>
				<attribute name="Main-Class" value="org.vpac.ndg.cli.Client" />
				<attribute name="Class-Path" value="${lib.list}"/>
			</manifest>
		</jar>

		<!-- Zip distribution into a zipped file -->
		<zip destfile="${dist}/${dist.name}.zip" whenempty="fail">
			<!-- Some fancy stuff to make sure the script is executable. -->
			<zipfileset dir="${dist}" includes="${dist.name}/**/*" excludes="${dist.name}/rsa,${dist.name}/ng" />
			<zipfileset dir="${dist}" includes="${dist.name}/rsa" filemode="755" />
			<zipfileset dir="${dist}" includes="${dist.name}/ng" filemode="755" />
		</zip>
	</target>

	<target name="install" depends="dist,javadoc,source">
	</target>

	<target name="javadoc">
		<javadoc access="public" author="true" destdir="${doc}" doctitle="CmdClient Documentation" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" source="${source}" sourcepath="${src};${storagemanagerSrc};${querySrc}" splitindex="true" use="true" version="true">
			<classpath refid="classpath" />
			<classpath refid="gdal-classpath" />
		</javadoc>

		<!-- Zip javadocs into a zipped file -->
		<zip destfile="${dist}/${dist.name}-JAVADOC.zip" basedir="${doc}" update="false" whenempty="fail" compress="true" />
	</target>

	<target name="source">
		<mkdir dir="${dist}" />
		<!-- Zip source into a zipped file -->
		<zip destfile="${dist}/${dist.name}-SOURCE.zip" basedir="${src}" />
	</target>
</project>
